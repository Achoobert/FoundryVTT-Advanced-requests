# GitHub Actions workflow for creating a new FoundryVTT module release.
#
# Useful References:
#   - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#   - https://docs.github.com/en/actions/learn-github-actions/contexts
#   - https://docs.github.com/en/actions/learn-github-actions/environment-variables
#
# Troubleshooting Checklist:
#   - Is the module's manifest file valid JSON?
#     You can test your manifest file using https://jsonlint.com/.
#
#   - Does the module's manifest have all the required keys?
#     See https://foundryvtt.com/article/module-development/#manifest for more
#     information.
#
#   - Are all the proper files and directories being included in the release's
#     module archive ("module.zip")?
#     Check that the correct files are being passed to the `zip` command run
#     in the "Create Module Archive" step below.
#
#   - Is the release tag the proper format?
#     See the comments for the "Extract Version From Tag" step below.
#
#   - Is a GitHub release being published?
#     This workflow will only run when a release is published, not when a
#     release is updated. Furthermore, note that while a GitHub release will
#     (by default) create a repository tag, a repository tag will not create
#     or publish a GitHub release.
#
#   - Has the module's entry on FoundryVTT's module administration site
#     (https://foundryvtt.com/admin) been updated?
#
name: Force GitHub Release

on:
  release:
    types: [published, created, edited]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag (e.g. v1.2.3)'
        required: true

env:
  project_url: "https://github.com/${{ github.repository }}"
  latest_manifest_url: "https://github.com/${{ github.repository }}/releases/latest/download/module.json"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      release_tag: ${{ github.event.release.tag_name || github.event.inputs.tag_name }}
      release_module_url: "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name || github.event.inputs.tag_name }}/module.zip"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure Tag Exists
        run: |
          if [ -z "${{ env.release_tag }}" ]; then
            echo "No tag found! You must provide a tag when running manually."
            exit 1
          fi

      - name: Extract Version or Set Default
        id: set_version
        run: |
          if [[ "$release_tag" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version="${release_tag#v}"
          else
            version="0.0.0-manual"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Modify Module Manifest With Release-Specific Values
        id: sub_manifest_link_version
        uses: cschleiden/replace-tokens@v1
        with:
          files: 'module.json'
        env:
          VERSION: ${{ steps.set_version.outputs.version }}
          URL: ${{ env.project_url }}
          MANIFEST: ${{ env.latest_manifest_url }}
          DOWNLOAD: ${{ env.release_module_url }}

      - name: Create Module Archive
        run: |
          zip --recurse-paths ./module.zip \
            module.json \
            README.md \
            LICENSE \
            templates \
            scripts/ \
            styles/ \
            packs/ \
            language/ \
            assets/ \
            lang/

      - name: Update Release With Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: ${{ github.event.release.name || env.release_tag }}
          draft: ${{ github.event.release.unpublished || false }}
          prerelease: ${{ github.event.release.prerelease || false }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.json, ./module.zip'
          tag: ${{ env.release_tag }}
          body: ${{ github.event.release.body || 'Automated release' }}
